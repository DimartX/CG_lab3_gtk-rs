use std::collections::HashMap;
use gtk::prelude::*;
use crate::view::*;

// Shared state for communication between buttons and drawingarea

pub struct State {
    pub parameter_a     : f64,
    pub parameter_b     : f64,
    pub parameter_c     : f64,
    pub approx          : f64,
    pub move_x          : f64,
    pub move_y          : f64,
    pub move_z          : f64,
    pub rotation_x      : f64,
    pub rotation_y      : f64,
    pub rotation_z      : f64,
    pub material_color_r: f64,
    pub material_color_g: f64,
    pub material_color_b: f64,
    pub material_ka_r   : f64,
    pub material_ka_g   : f64,
    pub material_ka_b   : f64,
    pub material_kd_r   : f64,
    pub material_kd_g   : f64,
    pub material_kd_b   : f64,
    pub material_ks_r   : f64,
    pub material_ks_g   : f64,
    pub material_ks_b   : f64,
    pub material_p      : f64,
    pub lighting_ia_r   : f64,
    pub lighting_ia_g   : f64,
    pub lighting_ia_b   : f64,
    pub lighting_il_r   : f64,
    pub lighting_il_g   : f64,
    pub lighting_il_b   : f64,
    pub lighting_pos_x  : f64,
    pub lighting_pos_y  : f64,
    pub lighting_pos_z  : f64,
    pub md              : f64,
    pub mk              : f64,
    pub carcass         : bool,
    pub hide_lines      : bool,
    pub drawing_method  : DrawingMethod,
    pub view            : View,
    pub mouse_x         : f64,
    pub mouse_y         : f64,
}

impl State {
    pub fn new(
        buttons: &HashMap<String, gtk::SpinButton>,
        check_buttons: &HashMap<String, gtk::CheckButton>,
        combo_box: &HashMap<String, gtk::ComboBoxText>,
    ) -> Self {
        Self {
            parameter_a     : buttons.get("parameter_a").unwrap().get_value(),
            parameter_b     : buttons.get("parameter_b").unwrap().get_value(),
            parameter_c     : buttons.get("parameter_c").unwrap().get_value(),
            approx          : buttons.get("approx").unwrap().get_value(),
            move_x          : buttons.get("move_x").unwrap().get_value(),
            move_y          : buttons.get("move_y").unwrap().get_value(),
            move_z          : buttons.get("move_z").unwrap().get_value(),
            rotation_x      : buttons.get("rotation_x").unwrap().get_value(),
            rotation_y      : buttons.get("rotation_y").unwrap().get_value(),
            rotation_z      : buttons.get("rotation_z").unwrap().get_value(),
            material_color_r: buttons.get("material_color_r").unwrap().get_value(),
            material_color_g: buttons.get("material_color_g").unwrap().get_value(),
            material_color_b: buttons.get("material_color_b").unwrap().get_value(),
            material_ka_r   : buttons.get("material_ka_r").unwrap().get_value(),
            material_ka_g   : buttons.get("material_ka_g").unwrap().get_value(),
            material_ka_b   : buttons.get("material_ka_b").unwrap().get_value(),
            material_kd_r   : buttons.get("material_kd_r").unwrap().get_value(),
            material_kd_g   : buttons.get("material_kd_g").unwrap().get_value(),
            material_kd_b   : buttons.get("material_kd_b").unwrap().get_value(),
            material_ks_r   : buttons.get("material_ks_r").unwrap().get_value(),
            material_ks_g   : buttons.get("material_ks_g").unwrap().get_value(),
            material_ks_b   : buttons.get("material_ks_b").unwrap().get_value(),
            material_p      : buttons.get("material_p").unwrap().get_value(),
            lighting_ia_r   : buttons.get("lighting_ia_r").unwrap().get_value(),
            lighting_ia_g   : buttons.get("lighting_ia_g").unwrap().get_value(),
            lighting_ia_b   : buttons.get("lighting_ia_b").unwrap().get_value(),
            lighting_il_r   : buttons.get("lighting_il_r").unwrap().get_value(),
            lighting_il_g   : buttons.get("lighting_il_g").unwrap().get_value(),
            lighting_il_b   : buttons.get("lighting_il_b").unwrap().get_value(),
            lighting_pos_x  : buttons.get("lighting_pos_x").unwrap().get_value(),
            lighting_pos_y  : buttons.get("lighting_pos_y").unwrap().get_value(),
            lighting_pos_z  : buttons.get("lighting_pos_z").unwrap().get_value(),
            md              : buttons.get("md").unwrap().get_value(),
            mk              : buttons.get("mk").unwrap().get_value(),
            carcass         : check_buttons.get("carcass_visualisation").unwrap().get_active(),
            hide_lines      : check_buttons.get("ignore_invisible").unwrap().get_active(),
            drawing_method  : drawing_method_from(combo_box["drawing_method"].get_active_id().unwrap().as_str()),
            view            : view_from(combo_box["projection"].get_active_id().unwrap().as_str()),
            mouse_x         : 0.0,
            mouse_y         : 0.0,
        }
    }
}
